# サンプルコードを参考に namespace を定義
# https://doc.akka.io/libraries/akka-management/current/attachments/akka-sample-cluster-kubernetes-scala.zip
apiVersion: v1
kind: Namespace
metadata:
  name: til-akka-typed-1
  labels:
    name: til-akka-typed-1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: til-akka-typed
  name: til-akka-typed
  namespace: til-akka-typed-1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: til-akka-typed
  template:
    metadata:
      labels:
        app: til-akka-typed
    spec:
      containers:
        - name: til-akka-typed
          image: kuramapommel/til-akka-typed:latest
          # readinessProbe:
          #   httpGet:
          #     path: /ready
          #     port: management
          # livenessProbe:
          #   httpGet:
          #     path: /alive
          #     port: management
          ports:
            - name: management
              containerPort: 8558
              protocol: TCP
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: REQUIRED_CONTACT_POINT_NR
              value: "2"
            - name: HTTP_PORT
              value: "8080"
            - name: DYNAMODB_HOST
              value: "dynamodb-local-service.til-akka-typed-1"
            - name: DYNAMODB_PORT
              value: "8000"
          resources:
            limits:
              memory: 1024Mi
            requests:
              cpu: 2
              memory: 1024Mi
---
# kubernetes-api を利用するために必要な権限設定
# https://doc.akka.io/libraries/akka-management/current/kubernetes-deployment/forming-a-cluster.html#role-based-access-control
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reader
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "watch", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
subjects:
  - kind: User
    name: system:serviceaccount:til-akka-typed-1:default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dynamodb-local-deployment
  namespace: til-akka-typed-1
spec:
  selector:
    matchLabels:
      app: dynamodb-local
  replicas: 1
  template:
    metadata:
      labels:
        app: dynamodb-local
    spec:
      containers:
        - name: dynamodb-local
          image: amazon/dynamodb-local:latest
          ports:
            - containerPort: 8000
          args: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory"]
          volumeMounts:
            - mountPath: /data
              name: data-volume
      volumes:
        - name: data-volume
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: dynamodb-local-service
  namespace: til-akka-typed-1
spec:
  type: NodePort
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      nodePort: 30000
  selector:
    app: dynamodb-local

---
apiVersion: v1
kind: Pod
metadata:
  name: dynamodb-setup-pod
  labels:
    app: dynamodb-setup-pod
  namespace: til-akka-typed-1
spec:
  restartPolicy: Never # 再起動しない設定
  containers:
    - name: dynamodb-setup
      image: infrastructureascode/aws-cli
      env:
        - name: AWS_ACCESS_KEY_ID
          value: "DUMMYAWSACCESSKEYID"
        - name: AWS_SECRET_ACCESS_KEY
          value: "DUMMYAWSSECRETACCESSKEY"
        - name: AWS_DEFAULT_REGION
          value: "us-east-1"
        - name: AWS_REGION
          value: "us-east-1"
        - name: LOCALSTACK_HOST
          value: "dynamodb-local-service.til-akka-typed-1"
        - name: DDB_PORT
          value: "8000"
      volumeMounts:
        - name: scripts-volume
          mountPath: /scripts/dynamodb
      command: ["/scripts/dynamodb/entrypoint.sh"]
  volumes:
    - name: scripts-volume
      hostPath:
        path: "/scripts/dynamodb"
        type: Directory
