til-akka-typed {
  routes {
    # If ask takes more time than this to complete the request is failed
    ask-timeout = 5s
  }
  server {
    host = "0.0.0.0"
    port = 8080
    port = ${?HTTP_PORT}
  }
}

akka {
  persistence {
    journal {
      plugin = "akka.persistence.journal.inmem"
      inmem.class = "akka.persistence.journal.inmem.InmemJournal"
      # plugin = "akka.persistence.dynamodb.journal"
    }
    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      local.dir = "target/snapshots"
      # plugin = "akka.persistence.dynamodb.snapshot"
    }
  }
  actor.provider = "cluster"
  remote.artery.canonical {
    hostname = "0.0.0.0"
    hostname = ${?SEED_HOST}
    port = 2551
    port = ${?SEED_PORT}
  }

  cluster {
    seed-nodes = [
      "akka://ClusterSystem@0.0.0.0:2551",
      ]
    seed-nodes = ${?SEED_NODES}
    
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }
}

# https://doc.akka.io/libraries/akka-persistence-dynamodb/current/overview.html から引用
akka.persistence.dynamodb {
  journal {
    class = "akka.persistence.dynamodb.journal.DynamoDBJournal"

    # name of the table to use for events
    table = "event_journal"

    # Set this to off to disable publishing of events as Akka messages to running
    # eventsBySlices queries.
    # Tradeoff is more CPU and network resources that are used. The events
    # must still be retrieved from the database, but at a lower polling frequency,
    # because delivery of published messages are not guaranteed.
    # When this feature is enabled it will measure the throughput and automatically
    # disable/enable if the throughput exceeds the configured threshold. See
    # publish-events-dynamic configuration.
    publish-events = on

    # When publish-events is enabled it will measure the throughput and automatically
    # disable/enable if the throughput exceeds the configured threshold.
    # This configuration cannot be defined per journal, but is global for the ActorSystem.
    publish-events-dynamic {
      # If exponentially weighted moving average of measured throughput exceeds this
      # threshold publishing of events is disabled. It is enabled again when lower than
      # the threshold.
      throughput-threshold = 400
      # The interval of the throughput measurements.
      throughput-collect-interval = 10 seconds
    }

    # Group the slices for an entity type into this number of topics. Most efficient is to use
    # the same number as number of projection instances. If configured to less than the number of
    # projection instances the overhead is that events will be sent more than once and discarded
    # on the destination side. If configured to more than the number of projection instances
    # the events will only be sent once but there is a risk of exceeding the limits of number
    # of topics that PubSub can handle (e.g. OversizedPayloadException).
    # Must be between 1 and 1024 and a whole number divisor of 1024 (number of slices).
    # This configuration can be changed in a rolling update, but there might be some events
    # that are not delivered via the pub-sub path and instead delivered later by the queries.
    # This configuration cannot be defined per journal, but is global for the ActorSystem.
    publish-events-number-of-topics = 128

    # replay filter not needed for this plugin
    replay-filter.mode = off

  }

  snapshot {
    class = "akka.persistence.dynamodb.snapshot.DynamoDBSnapshotStore"

    # name of the table to use for snapshots
    table = "snapshot"

    # Enables an optimization in Akka for avoiding snapshot deletes in retention.
    only-one-snapshot = true
  }

  client {
    # The amount of time to allow the client to complete the execution of an API call, including retry attempts.
    # It should be set lower than the circuit-breaker.call-timeout.
    call-timeout = 9 seconds

    # The amount of time to wait for each API request to complete before giving up and timing out.
    # Can be used together with `call-timeout` to enforce both a timeout on each individual HTTP request
    # (i.e. each retry) and the total time spent on all requests across retries (i.e. the 'API call' time).
    # Disabled when set to `off` or `none`.
    call-attempt-timeout = none

    # HTTP client settings.
    http {
      # Maximum number of allowed concurrent requests.
      max-concurrency = 50

      # The maximum number of pending acquires allowed.
      max-pending-connection-acquires = 10000

      # The amount of time to wait for a read before an exception is thrown.
      read-timeout = 30 seconds

      # The amount of time to wait for a write before an exception is thrown.
      write-timeout = 30 seconds

      # The amount of time to wait when initially establishing a connection before giving up and timing out.
      connection-timeout = 2 seconds

      # The amount of time to wait when acquiring a connection from the pool before giving up and timing out.
      connection-acquisition-timeout = 10 seconds

      # The maximum amount of time that a connection should be allowed to remain open, regardless of usage frequency.
      # Zero indicates an infinite amount of time.
      connection-time-to-live = 0

      # Configure whether idle connections in the connection pool should be closed.
      # Set `connection-max-idle-time` for amount of idle time that should be allowed.
      use-idle-connection-reaper = true

      # The maximum amount of time that a connection should be allowed to remain open while idle.
      # Enabled with `use-idle-connection-reaper`.
      connection-max-idle-time = 60 seconds

      # Configure the maximum amount of time that a TLS handshake is allowed to take.
      tls-negotiation-timeout = 5 seconds

      # Whether to enable or disable TCP KeepAlive.
      tcp-keep-alive = false
    }

    # Retry policy settings.
    retry-policy {
      # Whether retries are enabled.
      enabled = on

      # Set the retry mode. Can be `default`, `legacy`, `standard`, or `adaptive`.
      # See the documentation for the AWS SDK for Java for details.
      # As of AWS SDK 2.25.59, the default for DynamoDB is `legacy`, which is not recommended
      retry-mode = standard

      # Maximum number of times that a single request should be retried, assuming it fails for a retryable error.
      # Can be `default` for the default number of retries for the `retry-mode`, or override with a specific number.
      num-retries = default
    }

    # Request compression settings.
    compression {
      # Whether request compression is enabled.
      enabled = on

      # Minimum compression threshold, inclusive, in bytes. A request whose size is less than the threshold
      # will not be compressed. The value must be non-negative and no greater than 10 MiB (10,485,760 B).
      threshold = 10 KiB
    }

    # Configure the region of the DynamoDB instance.
    #
    # If this setting is not specified, then the default region lookup for the DynamoDB client will be used:
    #   - system property - `aws.region`
    #   - environment variable - `AWS_REGION`
    #   - credentials and config files at the default locations (~/.aws/credentials, ~/.aws/config)
    #   - if running in EC2, check the EC2 metadata service
    region = ""

    # Configuration for testing with DynamoDB local.
    # When enabled, will automatically set the endpoint, an arbitrary region, and dummy credentials.
    local {
      # Enable client for testing with DynamoDB local.
      enabled = true

      # Host for DynamoDB local endpoint.
      host = "dynamodb"

      # Port for DynamoDB local endpoint.
      port = 8000
    }
  }
}